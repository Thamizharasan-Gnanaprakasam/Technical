/*
Cluster Key - Creeated for large Table - to imporve scan efficiency
    > Subset of rows to store in micro-partitions
    > Snowflake will automatically create the cluster key
    > Snowflake can provide well clustered large table
    > Cluster key are not ideal and can change over time

    > We can use the keys used in Where clause or Join keys as Cluster keys
    > One ore more cluster keys are possible
    > Need tot avoid beow 2, which will affect the clusting
        1. Large number of Unique values (example ID)
        2. Small amount of Unique Values (Gender)

CREATE TABLE TABLE_NAME (COLS) CLUSTER BY (FIELD NAME)
ALTER TABLE TABLE_NAME CLUSTER BY (FIELD NAME1, FIELD NAME 2)
ALTER TABLE TABLE_NAME CLUSTER BY (EXPRESSION)
ALTER TABLE TABLE_NAME DROP CLUSTERING KEY
*/

SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS;

SELECT GET_DDL('TABLE','OUR_FIRST_DB.PUBLIC.ORDERS');


create or replace TABLE OUR_FIRST_DB.PUBLIC.ORDERS_CACHING (
	ORDERID VARCHAR(30),
	AMOUNT NUMBER(38,0),
	PROFIT NUMBER(38,0),
	QUANTITY NUMBER(38,0),
	CATEGORY VARCHAR(30),
	SUBCATEGORY VARCHAR(30),
    DATE DATE
);

INSERT INTO OUR_FIRST_DB.PUBLIC.ORDERS_CACHING
SELECT
T1.ORDERID,
T1.AMOUNT,
T1.PROFIT,
T1.QUANTITY,
T1.CATEGORY,
T1.SUBCATEGORY,
DATE(UNIFORM(1500000000,1700000000,RANDOM())) -- PRODUCE RANDOM DATES BETWEEN 1,500,000,000 AND 1,700,000,000
FROM OUR_FIRST_DB.PUBLIC.ORDERS T1
CROSS JOIN OUR_FIRST_DB.PUBLIC.ORDERS T2
CROSS JOIN (SELECT TOP 100 * FROM OUR_FIRST_DB.PUBLIC.ORDERS)  T3;


SELECT DATE,COUNT(10) FROM OUR_FIRST_DB.PUBLIC.ORDERS_CACHING GROUP BY 1 ORDER BY 1 DESC;

SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_CACHING WHERE DATE = '2023-09-20';

ALTER TABLE OUR_FIRST_DB.PUBLIC.ORDERS_CACHING
 CLUSTER BY (DATE);

 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_CACHING WHERE DATE = '2023-09-19';

 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_CACHING WHERE MONTH(DATE) = 8;

 ALTER TABLE OUR_FIRST_DB.PUBLIC.ORDERS_CACHING
 CLUSTER BY (MONTH(DATE));

 SELECT * FROM OUR_FIRST_DB.PUBLIC.ORDERS_CACHING WHERE MONTH(DATE) = 9;

 SELECT TO_TIMESTAMP(UNIFORM(1500000000,1700000000,RANDOM())::STRING),COUNT(10) FROM TABLE(GENERATOR(ROWCOUNT => 200000000))
 GROUP BY 1
 ORDER BY 1;